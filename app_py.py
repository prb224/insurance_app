# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mClaeVk-uHRmdCkhimrbLPw7okOJK_Hc
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

# Set page config
st.set_page_config(page_title="Insurance Premium Prediction Demo", layout="centered")

st.title('ðŸš— Auto Insurance Premium Prediction - Demo App')
st.markdown("""
This app allows you to upload an insurance dataset, explore basic statistics, visualize trends, and build a simple predictive model.
---
""")

# Upload data
uploaded_file = st.file_uploader("Upload your insurance CSV file", type=["csv"])

if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)

    st.header("ðŸ“„ Data Preview")
    st.dataframe(data.head())

    st.header("ðŸ“Š Summary Statistics")
    st.write(data.describe())

    st.header("ðŸ§® Correlation Heatmap")
    numeric_cols = data.select_dtypes(include=['int64', 'float64']).columns

    if len(numeric_cols) >= 2:
        fig_corr, ax_corr = plt.subplots(figsize=(8,6))
        sns.heatmap(data[numeric_cols].corr(), annot=True, cmap="coolwarm", ax=ax_corr)
        st.pyplot(fig_corr)
    else:
        st.write("Not enough numeric columns for correlation analysis.")

    st.header("ðŸ“ˆ Visualizations")

    # Dropdown for column selection
    col_to_plot = st.selectbox("Choose a column to plot:", numeric_cols)

    if col_to_plot:
        fig_hist, ax_hist = plt.subplots(figsize=(8,4))
        sns.histplot(data[col_to_plot], kde=True, ax=ax_hist)
        ax_hist.set_title(f'Distribution of {col_to_plot}')
        st.pyplot(fig_hist)

    st.markdown("---")

    # --- Real-time modeling ---
    st.header("ðŸ¤– Real-time Modeling")

    if 'Premium_Amount' not in data.columns:
        st.error("Dataset must have a 'Premium_Amount' column as the target variable.")
    else:
        features = data.drop(columns=['Premium_Amount'])
        features = pd.get_dummies(features, drop_first=True)  # Handle categorical variables
        target = data['Premium_Amount']

        # Train-test split
        X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

        # Model selection dropdown
        model_choice = st.selectbox("Choose a model:", ["Gradient Boosting", "Random Forest"])

        # Initialize model based on selection
        if model_choice == "Gradient Boosting":
            model = GradientBoostingRegressor(random_state=42)
        elif model_choice == "Random Forest":
            model = RandomForestRegressor(random_state=42)

        # Train the model
        model.fit(X_train, y_train)

        # Predictions and RMSE
        preds = model.predict(X_test)
        rmse = np.sqrt(mean_squared_error(y_test, preds))

        st.success(f"Model trained! Test RMSE for {model_choice}: ${rmse:.2f}")

    st.caption("Developed by Prisha Bandyopadhyay for DSCI 441.")

